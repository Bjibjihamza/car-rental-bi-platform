-- ============================================================================
-- RAW Layer Schema - Car Rental with IoT (Oracle 12c+ / XEPDB1)
-- Cleaned version: fixes trigger privilege, removes duplicate email index,
-- replaces invalid CHECK(year) with a BEFORE trigger.
-- ============================================================================

-- Optional: work inside RAW schema explicitly (if running as SYSTEM)
-- ALTER SESSION SET CURRENT_SCHEMA = RAW_LAYER;

-- ============================================
-- Helpers (optional)
-- ============================================
-- Example placeholder proc (not required by triggers)
CREATE OR REPLACE PROCEDURE set_updated_at(p_new IN OUT NOCOPY DATE) AS
BEGIN
  p_new := SYSTIMESTAMP;
END;
/
-- ============================================
-- Branches
-- ============================================
CREATE TABLE Branches (
    branch_id    NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    branch_name  VARCHAR2(100) NOT NULL,
    address      VARCHAR2(255) NOT NULL,
    city         VARCHAR2(100) NOT NULL,
    country      VARCHAR2(100) NOT NULL,
    phone        VARCHAR2(20),
    email        VARCHAR2(100),
    manager_id   NUMBER(19),
    created_at   TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL
);

CREATE INDEX idx_branch_city ON Branches(city);

-- ============================================
-- Managers
-- ============================================
CREATE TABLE Managers (
    manager_id NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name  VARCHAR2(50) NOT NULL,
    email      VARCHAR2(100) NOT NULL,
    phone      VARCHAR2(20),
    branch_id  NUMBER(19),
    hire_date  DATE NOT NULL,
    salary     NUMBER(10,2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT uq_mgr_email UNIQUE (email),
    CONSTRAINT fk_managers_branch
      FOREIGN KEY (branch_id) REFERENCES Branches(branch_id)
      ON DELETE SET NULL
);

ALTER TABLE Branches
  ADD CONSTRAINT fk_branches_manager
  FOREIGN KEY (manager_id) REFERENCES Managers(manager_id)
  ON DELETE SET NULL;

-- ============================================
-- Clients
-- ============================================
CREATE TABLE Clients (
    client_id          NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name         VARCHAR2(50) NOT NULL,
    last_name          VARCHAR2(50) NOT NULL,
    email              VARCHAR2(100) NOT NULL,
    phone              VARCHAR2(20) NOT NULL,
    address            VARCHAR2(255),
    city               VARCHAR2(100),
    country            VARCHAR2(100),
    driver_license     VARCHAR2(50) NOT NULL,
    license_expiry_date DATE NOT NULL,
    date_of_birth      DATE NOT NULL,
    registration_date  DATE DEFAULT TRUNC(SYSDATE) NOT NULL,
    total_rentals      NUMBER(10) DEFAULT 0 NOT NULL,
    average_rating     NUMBER(3,2),
    created_at         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    updated_at         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT uq_clients_email UNIQUE (email),
    CONSTRAINT uq_clients_license UNIQUE (driver_license),
    CONSTRAINT ck_clients_total_rentals CHECK (total_rentals >= 0),
    CONSTRAINT ck_clients_avg_rating CHECK (average_rating IS NULL OR (average_rating BETWEEN 0 AND 5))
);

-- remove duplicate email index (unique constraint already creates one)
CREATE INDEX idx_client_name ON Clients(last_name, first_name);

CREATE OR REPLACE TRIGGER trg_clients_updated
BEFORE UPDATE ON Clients
FOR EACH ROW
BEGIN
  :NEW.updated_at := SYSTIMESTAMP;
END;
/
-- ============================================
-- Car Categories
-- ============================================
CREATE TABLE Car_Categories (
    category_id   NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_name VARCHAR2(50) NOT NULL,
    daily_rate    NUMBER(10,2) NOT NULL,
    description   CLOB,
    CONSTRAINT ck_cat_daily_rate CHECK (daily_rate >= 0)
);

-- ============================================
-- IoT Devices
-- ============================================
CREATE TABLE IoT_Devices (
    device_id        NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    device_serial    VARCHAR2(100) NOT NULL,
    device_type      VARCHAR2(50) NOT NULL,
    manufacturer     VARCHAR2(100),
    installation_date DATE,
    last_maintenance DATE,
    status           VARCHAR2(12) DEFAULT 'Active' NOT NULL,
    created_at       TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT uq_iot_serial UNIQUE (device_serial),
    CONSTRAINT ck_iot_status CHECK (status IN ('Active','Inactive','Maintenance','Defective'))
);

-- ============================================
-- Cars (with trigger-based year validation)
-- ============================================
CREATE TABLE Cars (
    car_id            NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    license_plate     VARCHAR2(20) NOT NULL,
    brand             VARCHAR2(50) NOT NULL,
    model             VARCHAR2(50) NOT NULL,
    year              NUMBER(4) NOT NULL,
    color             VARCHAR2(30),
    mileage           NUMBER(10) DEFAULT 0 NOT NULL,
    fuel_type         VARCHAR2(12) NOT NULL,
    transmission      VARCHAR2(12) NOT NULL,
    seats             NUMBER(3) NOT NULL,
    category_id       NUMBER(19) NOT NULL,
    branch_id         NUMBER(19) NOT NULL,
    iot_device_id     NUMBER(19),
    status            VARCHAR2(14) DEFAULT 'Disponible' NOT NULL,
    purchase_date     DATE,
    last_service_date DATE,
    next_service_due  DATE,
    daily_rate        NUMBER(10,2),
    created_at        TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    updated_at        TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT uq_cars_plate UNIQUE (license_plate),
    CONSTRAINT ck_car_mileage CHECK (mileage >= 0),
    CONSTRAINT ck_car_seats CHECK (seats > 0),
    CONSTRAINT ck_car_fuel CHECK (fuel_type IN ('Essence','Diesel','Electrique','Hybride')),
    CONSTRAINT ck_car_trans CHECK (transmission IN ('Manuelle','Automatique')),
    CONSTRAINT ck_car_status CHECK (status IN ('Disponible','Lou√©','Maintenance','Hors Service')),
    CONSTRAINT fk_cars_category FOREIGN KEY (category_id) REFERENCES Car_Categories(category_id),
    CONSTRAINT fk_cars_branch   FOREIGN KEY (branch_id)   REFERENCES Branches(branch_id),
    CONSTRAINT fk_cars_device   FOREIGN KEY (iot_device_id) REFERENCES IoT_Devices(device_id)
);

CREATE INDEX idx_car_status ON Cars(status);
CREATE INDEX idx_car_branch ON Cars(branch_id);

CREATE OR REPLACE TRIGGER trg_cars_updated
BEFORE UPDATE ON Cars
FOR EACH ROW
BEGIN
  :NEW.updated_at := SYSTIMESTAMP;
END;
/
-- Year bounds via trigger (replaces invalid CHECK with SYSTIMESTAMP)
CREATE OR REPLACE TRIGGER trg_cars_year_chk
BEFORE INSERT OR UPDATE ON Cars
FOR EACH ROW
DECLARE
  v_year NUMBER := EXTRACT(YEAR FROM SYSTIMESTAMP);
BEGIN
  IF :NEW.year < 1980 OR :NEW.year > v_year+1 THEN
    RAISE_APPLICATION_ERROR(-20010, 'Invalid car year');
  END IF;
END;
/
-- ============================================
-- Reservations
-- ============================================
CREATE TABLE Reservations (
    reservation_id   NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    client_id        NUMBER(19) NOT NULL,
    car_id           NUMBER(19) NOT NULL,
    branch_pickup_id NUMBER(19) NOT NULL,
    branch_return_id NUMBER(19) NOT NULL,
    reservation_date TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    pickup_date      TIMESTAMP WITH TIME ZONE NOT NULL,
    return_date      TIMESTAMP WITH TIME ZONE NOT NULL,
    total_amount     NUMBER(10,2),
    status           VARCHAR2(12) DEFAULT 'Pending' NOT NULL,
    CONSTRAINT fk_res_client  FOREIGN KEY (client_id)        REFERENCES Clients(client_id),
    CONSTRAINT fk_res_car     FOREIGN KEY (car_id)           REFERENCES Cars(car_id),
    CONSTRAINT fk_res_pickup  FOREIGN KEY (branch_pickup_id) REFERENCES Branches(branch_id),
    CONSTRAINT fk_res_return  FOREIGN KEY (branch_return_id) REFERENCES Branches(branch_id),
    CONSTRAINT ck_res_status  CHECK (status IN ('Pending','Confirmed','Cancelled','Completed'))
);

CREATE INDEX idx_res_dates ON Reservations(pickup_date, return_date);

-- ============================================
-- Rentals
-- ============================================
CREATE TABLE Rentals (
    rental_id            NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    reservation_id       NUMBER(19),
    client_id            NUMBER(19) NOT NULL,
    car_id               NUMBER(19) NOT NULL,
    manager_id           NUMBER(19),
    pickup_date          TIMESTAMP WITH TIME ZONE NOT NULL,
    expected_return_date TIMESTAMP WITH TIME ZONE NOT NULL,
    actual_return_date   TIMESTAMP WITH TIME ZONE,
    pickup_mileage       NUMBER(10) NOT NULL,
    return_mileage       NUMBER(10),
    daily_rate           NUMBER(10,2) NOT NULL,
    total_amount         NUMBER(10,2),
    deposit_amount       NUMBER(10,2),
    status               VARCHAR2(12) DEFAULT 'Active' NOT NULL,
    payment_status       VARCHAR2(9)  DEFAULT 'Pending' NOT NULL,
    distance_driven_km   NUMBER(10,2),
    fuel_used_l          NUMBER(10,2),
    rental_rating        NUMBER(3,2),
    state_before         CLOB,
    state_after          CLOB,
    created_at           TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    updated_at           TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT fk_rent_res   FOREIGN KEY (reservation_id) REFERENCES Reservations(reservation_id),
    CONSTRAINT fk_rent_client FOREIGN KEY (client_id)     REFERENCES Clients(client_id),
    CONSTRAINT fk_rent_car    FOREIGN KEY (car_id)        REFERENCES Cars(car_id),
    CONSTRAINT fk_rent_mgr    FOREIGN KEY (manager_id)    REFERENCES Managers(manager_id),
    CONSTRAINT ck_rent_dates  CHECK (actual_return_date IS NULL OR actual_return_date >= pickup_date),
    CONSTRAINT ck_rent_pickup CHECK (pickup_mileage >= 0),
    CONSTRAINT ck_rent_return CHECK (return_mileage IS NULL OR return_mileage >= pickup_mileage),
    CONSTRAINT ck_rent_rates  CHECK (daily_rate >= 0 AND (total_amount IS NULL OR total_amount >= 0) AND (deposit_amount IS NULL OR deposit_amount >= 0)),
    CONSTRAINT ck_rent_status CHECK (status IN ('Active','Completed','Cancelled')),
    CONSTRAINT ck_rent_payst  CHECK (payment_status IN ('Pending','Completed','Failed','Refunded')),
    CONSTRAINT ck_rent_metrics CHECK (
      (distance_driven_km IS NULL OR distance_driven_km >= 0) AND
      (fuel_used_l IS NULL OR fuel_used_l >= 0) AND
      (rental_rating IS NULL OR (rental_rating BETWEEN 0 AND 5))
    )
);

CREATE INDEX idx_rentals_client ON Rentals(client_id);
CREATE INDEX idx_rentals_car    ON Rentals(car_id);
CREATE INDEX idx_rentals_dates  ON Rentals(pickup_date, actual_return_date);

CREATE OR REPLACE TRIGGER trg_rentals_updated
BEFORE UPDATE ON Rentals
FOR EACH ROW
BEGIN
  :NEW.updated_at := SYSTIMESTAMP;
END;
/
-- No-overlap triggers
CREATE OR REPLACE TRIGGER trg_rentals_no_overlap_ins
BEFORE INSERT ON Rentals
FOR EACH ROW
DECLARE
  v_count NUMBER;
BEGIN
  SELECT COUNT(*)
    INTO v_count
    FROM Rentals r
   WHERE r.car_id = :NEW.car_id
     AND NVL(:NEW.actual_return_date, TO_TIMESTAMP_TZ('9999-12-31 23:59:59 +00:00','YYYY-MM-DD HH24:MI:SS TZH:TZM')) > r.pickup_date
     AND NVL(r.actual_return_date, TO_TIMESTAMP_TZ('9999-12-31 23:59:59 +00:00','YYYY-MM-DD HH24:MI:SS TZH:TZM')) > :NEW.pickup_date;
  IF v_count > 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Location chevauchante d√©tect√©e pour cette voiture');
  END IF;
END;
/
CREATE OR REPLACE TRIGGER trg_rentals_no_overlap_upd
BEFORE UPDATE ON Rentals
FOR EACH ROW
DECLARE
  v_count NUMBER;
BEGIN
  SELECT COUNT(*)
    INTO v_count
    FROM Rentals r
   WHERE r.car_id = :NEW.car_id
     AND r.rental_id <> :OLD.rental_id
     AND NVL(:NEW.actual_return_date, TO_TIMESTAMP_TZ('9999-12-31 23:59:59 +00:00','YYYY-MM-DD HH24:MI:SS TZH:TZM')) > r.pickup_date
     AND NVL(r.actual_return_date, TO_TIMESTAMP_TZ('9999-12-31 23:59:59 +00:00','YYYY-MM-DD HH24:MI:SS TZH:TZM')) > :NEW.pickup_date;
  IF v_count > 0 THEN
    RAISE_APPLICATION_ERROR(-20002, 'Location chevauchante d√©tect√©e pour cette voiture');
  END IF;
END;
/
-- ============================================
-- IoT_Data
-- ============================================
CREATE TABLE IoT_Data (
    data_id          NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    device_id        NUMBER(19) NOT NULL,
    car_id           NUMBER(19) NOT NULL,
    rental_id        NUMBER(19),
    ts_utc           TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    latitude         NUMBER(10,8),
    longitude        NUMBER(11,8),
    speed            NUMBER(5,2),
    fuel_level       NUMBER(5,2),
    engine_status    VARCHAR2(3),
    battery_voltage  NUMBER(4,2),
    temperature      NUMBER(5,2),
    odometer_reading NUMBER(10),
    CONSTRAINT fk_iot_data_dev  FOREIGN KEY (device_id) REFERENCES IoT_Devices(device_id),
    CONSTRAINT fk_iot_data_car  FOREIGN KEY (car_id)    REFERENCES Cars(car_id),
    CONSTRAINT fk_iot_data_rent FOREIGN KEY (rental_id) REFERENCES Rentals(rental_id),
    CONSTRAINT ck_engine_status CHECK (engine_status IN ('On','Off'))
);
CREATE INDEX idx_iot_ts       ON IoT_Data(ts_utc);
CREATE INDEX idx_iot_car      ON IoT_Data(car_id);
CREATE INDEX idx_iot_car_dev  ON IoT_Data(car_id, device_id);

-- ============================================
-- car_telemetry
-- ============================================
CREATE TABLE car_telemetry (
    telemetry_id        NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    car_id              NUMBER(19) NOT NULL,
    ts_observed         TIMESTAMP WITH TIME ZONE NOT NULL,
    latitude            BINARY_DOUBLE NOT NULL,
    longitude           BINARY_DOUBLE NOT NULL,
    speed_kph           NUMBER(7,2),
    fuel_level_pct      NUMBER(5,2),
    engine_temp_c       NUMBER(6,2),
    odometer_km         NUMBER(12,3),
    accel_ms2_long      NUMBER(8,3),
    accel_ms2_lat       NUMBER(8,3),
    ignition_on         CHAR(1) DEFAULT 'N' NOT NULL,
    battery_voltage_v   NUMBER(6,2),
    network_signal_dbm  NUMBER(10),
    location_accuracy_m NUMBER(8,2),
    ts_ingested         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    message_uid         RAW(16),
    CONSTRAINT fk_tel_car FOREIGN KEY (car_id) REFERENCES Cars(car_id),
    CONSTRAINT ck_lat CHECK (latitude  BETWEEN -90  AND 90),
    CONSTRAINT ck_lon CHECK (longitude BETWEEN -180 AND 180),
    CONSTRAINT ck_speed CHECK (speed_kph IS NULL OR speed_kph >= 0),
    CONSTRAINT ck_fuelp CHECK (fuel_level_pct BETWEEN 0 AND 100),
    CONSTRAINT ck_odom  CHECK (odometer_km IS NULL OR odometer_km >= 0),
    CONSTRAINT ck_ign   CHECK (ignition_on IN ('Y','N'))
);
CREATE INDEX idx_tel_time       ON car_telemetry(ts_observed DESC);
CREATE INDEX idx_tel_car_time   ON car_telemetry(car_id, ts_observed);
CREATE INDEX idx_tel_geo        ON car_telemetry(latitude, longitude);

-- ============================================
-- IoT_Alerts
-- ============================================
CREATE TABLE IoT_Alerts (
    alert_id        NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    device_id       NUMBER(19) NOT NULL,
    car_id          NUMBER(19) NOT NULL,
    rental_id       NUMBER(19),
    alert_type      VARCHAR2(30) NOT NULL,
    severity        VARCHAR2(8)  NOT NULL,
    description     CLOB,
    alert_timestamp TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    resolved        CHAR(1) DEFAULT 'N' NOT NULL,
    resolved_by     NUMBER(19),
    resolved_at     TIMESTAMP WITH TIME ZONE,
    CONSTRAINT fk_alert_dev  FOREIGN KEY (device_id) REFERENCES IoT_Devices(device_id),
    CONSTRAINT fk_alert_car  FOREIGN KEY (car_id)    REFERENCES Cars(car_id),
    CONSTRAINT fk_alert_rent FOREIGN KEY (rental_id) REFERENCES Rentals(rental_id),
    CONSTRAINT fk_alert_mgr  FOREIGN KEY (resolved_by) REFERENCES Managers(manager_id),
    CONSTRAINT ck_alert_type CHECK (alert_type IN ('Speeding','Low Fuel','Maintenance Required','Geofence Violation','Engine Problem','Accident Detection','Unauthorized Movement')),
    CONSTRAINT ck_severity   CHECK (severity  IN ('Low','Medium','High','Critical')),
    CONSTRAINT ck_resolved   CHECK (resolved IN ('Y','N'))
);
CREATE INDEX idx_alerts_unresolved ON IoT_Alerts(resolved, severity);

-- ============================================
-- Payments
-- ============================================
CREATE TABLE Payments (
    payment_id     NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rental_id      NUMBER(19) NOT NULL,
    payment_date   TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    amount         NUMBER(10,2) NOT NULL,
    payment_method VARCHAR2(15),
    transaction_id VARCHAR2(100),
    status         VARCHAR2(9) DEFAULT 'Pending' NOT NULL,
    CONSTRAINT fk_pay_rental FOREIGN KEY (rental_id) REFERENCES Rentals(rental_id),
    CONSTRAINT ck_amount CHECK (amount >= 0),
    CONSTRAINT ck_pay_method CHECK (payment_method IS NULL OR payment_method IN ('Cash','Credit Card','Debit Card','Bank Transfer','Mobile Payment')),
    CONSTRAINT ck_pay_status  CHECK (status IN ('Pending','Completed','Failed','Refunded'))
);
CREATE INDEX idx_pay_status ON Payments(status);

-- ============================================
-- Maintenance
-- ============================================
CREATE TABLE Maintenance (
    maintenance_id         NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    car_id                 NUMBER(19) NOT NULL,
    maintenance_type       VARCHAR2(20) NOT NULL,
    description            CLOB,
    cost                   NUMBER(10,2),
    maintenance_date       DATE NOT NULL,
    next_maintenance_date  DATE,
    performed_by           VARCHAR2(100),
    mileage_at_maintenance NUMBER(10),
    created_at             TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    updated_at             TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT fk_maint_car FOREIGN KEY (car_id) REFERENCES Cars(car_id),
    CONSTRAINT ck_maint_cost CHECK (cost IS NULL OR cost >= 0),
    CONSTRAINT ck_maint_type CHECK (maintenance_type IN ('Regular Service','Repair','Inspection','Emergency'))
);
CREATE OR REPLACE TRIGGER trg_maint_updated
BEFORE UPDATE ON Maintenance
FOR EACH ROW
BEGIN
  :NEW.updated_at := SYSTIMESTAMP;
END;
/
-- ============================================
-- Damages
-- ============================================
CREATE TABLE Damages (
    damage_id          NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rental_id          NUMBER(19) NOT NULL,
    car_id             NUMBER(19) NOT NULL,
    damage_description CLOB NOT NULL,
    damage_date        DATE NOT NULL,
    repair_cost        NUMBER(10,2),
    reported_by        NUMBER(19),
    status             VARCHAR2(12) DEFAULT 'Reported' NOT NULL,
    created_at         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    updated_at         TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP NOT NULL,
    CONSTRAINT fk_dmg_rental FOREIGN KEY (rental_id) REFERENCES Rentals(rental_id),
    CONSTRAINT fk_dmg_car    FOREIGN KEY (car_id)    REFERENCES Cars(car_id),
    CONSTRAINT fk_dmg_mgr    FOREIGN KEY (reported_by) REFERENCES Managers(manager_id),
    CONSTRAINT ck_dmg_cost   CHECK (repair_cost IS NULL OR repair_cost >= 0),
    CONSTRAINT ck_dmg_status CHECK (status IN ('Reported','Under Repair','Repaired'))
);
CREATE OR REPLACE TRIGGER trg_damages_updated
BEFORE UPDATE ON Damages
FOR EACH ROW
BEGIN
  :NEW.updated_at := SYSTIMESTAMP;
END;
/
-- ============================================
-- Trips
-- ============================================
CREATE TABLE Trips (
    trip_id         NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rental_id       NUMBER(19) NOT NULL,
    car_id          NUMBER(19) NOT NULL,
    start_time      TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time        TIMESTAMP WITH TIME ZONE,
    start_latitude  NUMBER(10,8),
    start_longitude NUMBER(11,8),
    end_latitude    NUMBER(10,8),
    end_longitude   NUMBER(11,8),
    distance_km     NUMBER(10,2),
    average_speed   NUMBER(5,2),
    max_speed       NUMBER(5,2),
    fuel_consumed   NUMBER(5,2),
    CONSTRAINT fk_trip_rental FOREIGN KEY (rental_id) REFERENCES Rentals(rental_id),
    CONSTRAINT fk_trip_car    FOREIGN KEY (car_id)    REFERENCES Cars(car_id)
);
CREATE INDEX idx_trip_car_time ON Trips(car_id, start_time);

-- ============================================
-- Views
-- ============================================
CREATE OR REPLACE VIEW Available_Cars_With_IoT AS
SELECT 
    c.car_id, c.license_plate, c.brand, c.model, c.year,
    cc.category_name, cc.daily_rate,
    b.branch_name, b.city,
    iot.device_serial, iot.device_type, iot.status AS device_status
FROM Cars c
JOIN Car_Categories cc ON c.category_id = cc.category_id
JOIN Branches b        ON c.branch_id   = b.branch_id
LEFT JOIN IoT_Devices iot ON c.iot_device_id = iot.device_id
WHERE c.status = 'Disponible';

CREATE OR REPLACE VIEW Active_Rentals_IoT AS
SELECT 
    r.rental_id, r.pickup_date, r.expected_return_date,
    cl.first_name, cl.last_name, cl.phone,
    c.license_plate, c.brand, c.model,
    iot.device_serial,
    (SELECT d.latitude  FROM IoT_Data d WHERE d.car_id = c.car_id ORDER BY d.ts_utc DESC FETCH FIRST 1 ROWS ONLY) AS last_latitude,
    (SELECT d.longitude FROM IoT_Data d WHERE d.car_id = c.car_id ORDER BY d.ts_utc DESC FETCH FIRST 1 ROWS ONLY) AS last_longitude,
    (SELECT d.fuel_level FROM IoT_Data d WHERE d.car_id = c.car_id ORDER BY d.ts_utc DESC FETCH FIRST 1 ROWS ONLY) AS current_fuel_level
FROM Rentals r
JOIN Clients cl ON r.client_id = cl.client_id
JOIN Cars c     ON r.car_id   = c.car_id
LEFT JOIN IoT_Devices iot ON c.iot_device_id = iot.device_id
WHERE r.status = 'Active';
