-- ======================================================================
-- CAR RENTAL DB — CORE STRUCTURE ONLY
-- EXCLUDES: FAILED_OPS, RESERVATIONS, RT_EVENTS
-- EXCLUDES: PKG_RENTAL, FN_* (availability/overlap), TRG_*, VW_FAILED_OPS_DAILY
-- Target schema  : RAW_LAYER
-- Compatibility  : Oracle 12c+ (IDENTITY)
-- Safety         : Idempotent drops (ignore if not exists)
-- ======================================================================

WHENEVER SQLERROR CONTINUE
SET DEFINE OFF
SET SERVEROUTPUT ON SIZE UNLIMITED

-- 0) Schema context
ALTER SESSION SET CURRENT_SCHEMA = RAW_LAYER;

-- ======================================================================
-- 1) DROP PHASE (safe / conditional)
--    We drop any obsolete/forbidden objects and the ones we recreate below
-- ======================================================================

-- Drop triggers that referenced reservation package (if any)
BEGIN
  FOR t IN (
    SELECT object_name FROM user_objects
    WHERE object_type = 'TRIGGER'
      AND object_name IN ('TRG_RES_AIUD_STATUS','TRG_RENT_AIUD_STATUS')
  ) LOOP
    BEGIN
      EXECUTE IMMEDIATE 'DROP TRIGGER '||t.object_name;
      DBMS_OUTPUT.PUT_LINE('Dropped trigger '||t.object_name);
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
  END LOOP;
END;
/

-- Drop reservation-related package & functions (if any)
BEGIN
  FOR s IN (SELECT object_name FROM user_objects WHERE object_type='PACKAGE' AND object_name='PKG_RENTAL') LOOP
    BEGIN EXECUTE IMMEDIATE 'DROP PACKAGE PKG_RENTAL'; DBMS_OUTPUT.PUT_LINE('Dropped package PKG_RENTAL'); EXCEPTION WHEN OTHERS THEN NULL; END;
  END LOOP;
  FOR f IN (
    SELECT object_name FROM user_objects
    WHERE object_type='FUNCTION'
      AND object_name IN ('FN_CAR_AVAILABLE','FN_CAR_AVAILABLE_EXCL_RES','FN_PERIODS_OVERLAP')
  ) LOOP
    BEGIN EXECUTE IMMEDIATE 'DROP FUNCTION '||f.object_name; DBMS_OUTPUT.PUT_LINE('Dropped function '||f.object_name); EXCEPTION WHEN OTHERS THEN NULL; END;
  END LOOP;
END;
/

-- Drop forbidden tables & views if present
BEGIN
  FOR v IN (SELECT view_name FROM user_views WHERE view_name IN ('VW_FAILED_OPS_DAILY')) LOOP
    BEGIN EXECUTE IMMEDIATE 'DROP VIEW '||v.view_name; DBMS_OUTPUT.PUT_LINE('Dropped view '||v.view_name); EXCEPTION WHEN OTHERS THEN NULL; END;
  END LOOP;

  -- Forbidden tables
  FOR t IN (
    SELECT table_name FROM user_tables
    WHERE table_name IN ('FAILED_OPS','RESERVATIONS','RT_EVENTS')
  ) LOOP
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE '||t.table_name||' CASCADE CONSTRAINTS PURGE';
      DBMS_OUTPUT.PUT_LINE('Dropped table '||t.table_name);
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
  END LOOP;

  -- Core tables we (re)create below
  FOR t IN (
    SELECT table_name FROM user_tables
    WHERE table_name IN ('IOT_ALERTS','RENTALS','CUSTOMERS','CARS','IOT_DEVICES','CAR_CATEGORIES','MANAGERS','BRANCHES')
  ) LOOP
    BEGIN EXECUTE IMMEDIATE 'DROP TABLE '||t.table_name||' CASCADE CONSTRAINTS PURGE';
      DBMS_OUTPUT.PUT_LINE('Dropped table '||t.table_name);
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
  END LOOP;

  -- Utility view (we will recreate)
  BEGIN EXECUTE IMMEDIATE 'DROP VIEW VW_CAR_INVENTORY'; EXCEPTION WHEN OTHERS THEN NULL; END;
END;
/
COMMIT;

-- ======================================================================
-- 2) CORE TABLES (dependency order)
-- ======================================================================

-- BRANCHES
CREATE TABLE BRANCHES (
  BRANCH_ID    NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  BRANCH_NAME  VARCHAR2(100) NOT NULL,
  ADDRESS      VARCHAR2(200),
  CITY         VARCHAR2(100) NOT NULL,
  PHONE        VARCHAR2(30),
  EMAIL        VARCHAR2(100),
  CREATED_AT   TIMESTAMP DEFAULT SYSTIMESTAMP
);
CREATE INDEX IDX_BRANCH_CITY ON BRANCHES (CITY);

-- MANAGERS
CREATE TABLE MANAGERS (
  MANAGER_ID       NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  MANAGER_CODE     VARCHAR2(20)  UNIQUE NOT NULL,
  FIRST_NAME       VARCHAR2(50)  NOT NULL,
  LAST_NAME        VARCHAR2(50)  NOT NULL,
  EMAIL            VARCHAR2(100) UNIQUE NOT NULL,
  PHONE            VARCHAR2(30),
  MANAGER_PASSWORD VARCHAR2(255) NOT NULL,
  HIRE_DATE        DATE DEFAULT SYSDATE,
  BRANCH_ID        NUMBER NOT NULL,
  CONSTRAINT FK_MANAGER_BRANCH
    FOREIGN KEY (BRANCH_ID) REFERENCES BRANCHES (BRANCH_ID) ON DELETE CASCADE
);
CREATE INDEX IDX_MANAGERS_BRANCH_ID ON MANAGERS (BRANCH_ID);

-- CAR_CATEGORIES
CREATE TABLE CAR_CATEGORIES (
  CATEGORY_ID    NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  CATEGORY_NAME  VARCHAR2(60)  NOT NULL,
  DESCRIPTION    VARCHAR2(400),
  CREATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT UK_CAR_CATEGORIES_NAME UNIQUE (CATEGORY_NAME)
);

-- IOT_DEVICES
CREATE TABLE IOT_DEVICES (
  DEVICE_ID         NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  DEVICE_CODE       VARCHAR2(40) NOT NULL,
  DEVICE_IMEI       VARCHAR2(20),
  FIRMWARE_VERSION  VARCHAR2(40),
  STATUS            VARCHAR2(20) DEFAULT 'INACTIVE',
  ACTIVATED_AT      TIMESTAMP,
  LAST_SEEN_AT      TIMESTAMP,
  CREATED_AT        TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT UK_IOT_DEVICES_CODE UNIQUE (DEVICE_CODE),
  CONSTRAINT UK_IOT_DEVICES_IMEI UNIQUE (DEVICE_IMEI),
  CONSTRAINT CK_IOT_DEVICES_STATUS CHECK (STATUS IN ('ACTIVE','INACTIVE','RETIRED'))
);
CREATE INDEX IDX_IOT_DEVICES_STATUS ON IOT_DEVICES (STATUS);

-- CARS (DEVICE_ID nullable, unique if set)
CREATE TABLE CARS (
  CAR_ID         NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  CATEGORY_ID    NUMBER NOT NULL,
  DEVICE_ID      NUMBER,                               -- nullable
  VIN            VARCHAR2(30)  NOT NULL,
  LICENSE_PLATE  VARCHAR2(20)  NOT NULL,
  MAKE           VARCHAR2(60)  NOT NULL,
  MODEL          VARCHAR2(60)  NOT NULL,
  MODEL_YEAR     NUMBER(4),
  COLOR          VARCHAR2(40),
  ODOMETER_KM    NUMBER(10,0) DEFAULT 0,
  STATUS         VARCHAR2(20) DEFAULT 'AVAILABLE',
  BRANCH_ID      NUMBER,
  CREATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT UK_CARS_VIN           UNIQUE (VIN),
  CONSTRAINT UK_CARS_LICENSE_PLATE UNIQUE (LICENSE_PLATE),
  CONSTRAINT UK_CARS_DEVICE        UNIQUE (DEVICE_ID), -- multiple NULL allowed in Oracle
  CONSTRAINT CK_CARS_STATUS CHECK (STATUS IN ('AVAILABLE','RESERVED','RENTED','MAINTENANCE','RETIRED')),
  CONSTRAINT FK_CARS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CAR_CATEGORIES (CATEGORY_ID),
  CONSTRAINT FK_CARS_DEVICE   FOREIGN KEY (DEVICE_ID)   REFERENCES IOT_DEVICES   (DEVICE_ID),
  CONSTRAINT FK_CARS_BRANCH   FOREIGN KEY (BRANCH_ID)   REFERENCES BRANCHES      (BRANCH_ID)
);
CREATE INDEX IDX_CARS_CATEGORY ON CARS (CATEGORY_ID);
CREATE INDEX IDX_CARS_DEVICE   ON CARS (DEVICE_ID);
CREATE INDEX IDX_CARS_STATUS   ON CARS (STATUS);
CREATE INDEX IDX_CARS_BRANCH   ON CARS (BRANCH_ID);

-- CUSTOMERS
CREATE TABLE CUSTOMERS (
  CUSTOMER_ID   NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  FIRST_NAME    VARCHAR2(80) NOT NULL,
  LAST_NAME     VARCHAR2(80) NOT NULL,
  EMAIL         VARCHAR2(160),
  PHONE         VARCHAR2(40),
  ID_NUMBER     VARCHAR2(40),
  CREATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT UK_CUSTOMERS_EMAIL UNIQUE (EMAIL)
);

-- RENTALS (standalone: no reference to RESERVATIONS)
CREATE TABLE RENTALS (
  RENTAL_ID      NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  CAR_ID         NUMBER NOT NULL,
  CUSTOMER_ID    NUMBER NOT NULL,
  BRANCH_ID      NUMBER NOT NULL,
  MANAGER_ID     NUMBER,
  START_AT       TIMESTAMP NOT NULL,
  DUE_AT         TIMESTAMP NOT NULL,
  RETURN_AT      TIMESTAMP,
  STATUS         VARCHAR2(20) CHECK (STATUS IN ('ACTIVE','IN_PROGRESS','CLOSED','CANCELLED')),
  START_ODOMETER NUMBER(10,0),
  END_ODOMETER   NUMBER(10,0),
  TOTAL_AMOUNT   NUMBER(12,2),
  CURRENCY       VARCHAR2(3) DEFAULT 'MAD',
  CREATED_AT     TIMESTAMP DEFAULT SYSTIMESTAMP,
  CONSTRAINT FK_RENT_CAR  FOREIGN KEY (CAR_ID)      REFERENCES CARS(CAR_ID),
  CONSTRAINT FK_RENT_CUST FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
  CONSTRAINT FK_RENT_BR   FOREIGN KEY (BRANCH_ID)   REFERENCES BRANCHES(BRANCH_ID),
  CONSTRAINT FK_RENT_MGR  FOREIGN KEY (MANAGER_ID)  REFERENCES MANAGERS(MANAGER_ID)
);
CREATE INDEX IDX_RENTALS_BRANCH ON RENTALS (BRANCH_ID);
CREATE INDEX IDX_RENTALS_STATUS ON RENTALS (STATUS);
CREATE INDEX IX_RENT_CAR        ON RENTALS (CAR_ID, START_AT, DUE_AT);

-- IOT_ALERTS (kept for monitoring)
CREATE TABLE IOT_ALERTS (
  ALERT_ID   NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  BRANCH_ID  NUMBER REFERENCES BRANCHES (BRANCH_ID),
  STATUS     VARCHAR2(20) CHECK (STATUS IN ('OPEN','RESOLVED')),
  CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP
);
CREATE INDEX IDX_IOT_ALERTS_BRANCH ON IOT_ALERTS (BRANCH_ID);
CREATE INDEX IDX_IOT_ALERTS_STATUS ON IOT_ALERTS (STATUS);

COMMIT;



-- ============================================================
-- Table IOT_TELEMETRY pour stocker les données IoT
-- ============================================================

-- Drop si existe (optionnel)
DROP TABLE IOT_TELEMETRY CASCADE CONSTRAINTS;

CREATE TABLE IOT_TELEMETRY (
    TELEMETRY_ID       NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DEVICE_ID          NUMBER NOT NULL,
    CAR_ID             NUMBER NOT NULL,
    RENTAL_ID          NUMBER NOT NULL,
    TIMESTAMP          TIMESTAMP NOT NULL,
    LATITUDE           NUMBER(10, 7),
    LONGITUDE          NUMBER(10, 7),
    SPEED_KMH          NUMBER(6, 2),
    ACCELERATION_MS2   NUMBER(6, 3),
    BRAKE_PRESSURE_BAR NUMBER(5, 2),
    FUEL_LEVEL_PCT     NUMBER(5, 2),
    BATTERY_VOLTAGE    NUMBER(4, 2),
    ENGINE_TEMP_C      NUMBER(5, 2),
    ODOMETER_KM        NUMBER(10, 0),
    EVENT_TYPE         VARCHAR2(50),
    CREATED_AT         TIMESTAMP DEFAULT SYSTIMESTAMP,
    
    CONSTRAINT fk_iot_device FOREIGN KEY (DEVICE_ID) 
        REFERENCES IOT_DEVICES(DEVICE_ID) ON DELETE CASCADE,
    CONSTRAINT fk_iot_car FOREIGN KEY (CAR_ID) 
        REFERENCES CARS(CAR_ID) ON DELETE CASCADE,
    CONSTRAINT fk_iot_rental FOREIGN KEY (RENTAL_ID) 
        REFERENCES RENTALS(RENTAL_ID) ON DELETE CASCADE
);

-- Index pour améliorer les performances
CREATE INDEX idx_iot_rental ON IOT_TELEMETRY(RENTAL_ID);
CREATE INDEX idx_iot_timestamp ON IOT_TELEMETRY(TIMESTAMP);
CREATE INDEX idx_iot_device ON IOT_TELEMETRY(DEVICE_ID);
CREATE INDEX idx_iot_event_type ON IOT_TELEMETRY(EVENT_TYPE);

-- Commentaires
COMMENT ON TABLE IOT_TELEMETRY IS 'Données télémétriques IoT des véhicules en temps réel';
COMMENT ON COLUMN IOT_TELEMETRY.TELEMETRY_ID IS 'Identifiant unique de la mesure';
COMMENT ON COLUMN IOT_TELEMETRY.EVENT_TYPE IS 'Type: ENGINE_START, DRIVING, HARSH_BRAKE, RAPID_ACCEL, IDLE, ENGINE_STOP';
COMMENT ON COLUMN IOT_TELEMETRY.ACCELERATION_MS2 IS 'Accélération longitudinale en m/s² (négatif = freinage)';
COMMENT ON COLUMN IOT_TELEMETRY.BRAKE_PRESSURE_BAR IS 'Pression de freinage en bars (0-100)';





-- ======================================================================
-- 3) UTILITY VIEW (inventory)
-- ======================================================================
CREATE OR REPLACE VIEW VW_CAR_INVENTORY AS
SELECT
  c.CAR_ID,
  c.LICENSE_PLATE,
  c.MAKE,
  c.MODEL,
  c.MODEL_YEAR,
  c.COLOR,
  c.STATUS,
  b.BRANCH_NAME,
  cat.CATEGORY_NAME,
  d.DEVICE_CODE
FROM CARS c
LEFT JOIN BRANCHES b         ON b.BRANCH_ID = c.BRANCH_ID
LEFT JOIN CAR_CATEGORIES cat ON cat.CATEGORY_ID = c.CATEGORY_ID
LEFT JOIN IOT_DEVICES d      ON d.DEVICE_ID = c.DEVICE_ID;
/
-- ======================================================================
-- END
-- ======================================================================
